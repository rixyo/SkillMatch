
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String  @unique 
  emailVerified DateTime?
  customTag String @unique
  bio String?
  image String?
  coverImage String?
  profileImage String?
  hashedPassword String
  isVarified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  followerId String[] @db.ObjectId
  followingId String [] @db.ObjectId
  hasNotifications Boolean @default(false)
  notifications Notification[]
  posts Post[]
  comments Comment[]
}
model Post{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  body String
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  likesId String[] @db.ObjectId
  viewsId String[] @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
   comments          Comment[]
}
model Comment {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  postId             String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  userId             String @db.ObjectId
  createdAt          DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}